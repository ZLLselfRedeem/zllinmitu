//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace YJC.Toolkit.Razor.Dynamic {
    using System;
    using System.Text;
    using System.Collections.Generic;
    using System.Linq;
    using System.IO;
    using YJC.Toolkit.Razor;
    using YJC.Toolkit.Web;
    using System.Data;
    using YJC.Toolkit.MetaData;
    using YJC.Toolkit.Data;
    using YJC.Toolkit.Sys;
    using YJC.Toolkit.Accounting;
    
    
    public class dworkspacemygitrepmituworkweixinframeworkworkaccountmanagewebxmlrazortemplatebootcssaccounteditmaincshtml : YJC.Toolkit.Accounting.AccountEditTemplate {
        
#line hidden
 
    string GetJson(Tk5NormalTableData table)
    {
        var normalJson = "{\"Table\":\"Info\",\"SearchMethod\":\"Id\",\"JsonType\":\"Object\",\"Fields\":[{\"Name\":\"Company\",\"Type\":\"Text\"},{\"Name\":\"InputDate\",\"Type\":\"Date\"},{\"Name\":\"ReportId\",\"Type\":\"Hidden\"}]}";
        var json = string.Format("{{\"Tables\":[{0}, {1}]}}", table.JsonFields, normalJson);
        return StringUtil.EscapeHtmlAttribute(json);
    } 

        
        public dworkspacemygitrepmituworkweixinframeworkworkaccountmanagewebxmlrazortemplatebootcssaccounteditmaincshtml() {
        }
        
        public override void Execute() {
  
    NormalEditData pageData = ViewBag.PageData;
    //HtmlAttribute attribute = pageData.DialogMode ? new HtmlAttribute("data-dialog-action", "close")
    //    : new HtmlAttribute("data-url", HtmlUtil.GetRetUrl((DataSet)Model));
    HtmlAttribute retAttr = new HtmlAttribute("data-action", "return");

    DataRow dataRow = null; // HtmlUtil.GetMainRow((DataSet)Model, ViewBag);
    Tk5NormalTableData table = ViewBag.MetaData.Table;
    List<Tk5FieldInfoEx> hiddenFields = table.HiddenList;
    List<Tk5FieldInfoEx> normalFields = table.TableList;
    int columnCount = table.ColumnCount;
    int columnWidth = 12 / columnCount;
    int fieldsCount = normalFields.Count;
    int columnFieldCount = fieldsCount / columnCount;
    
     if ((fieldsCount % columnCount) != 0){
        ++columnFieldCount;
    }
     
    //bool showCaption = pageData.ShowCaption;
    //string dataClass = showCaption ? string.Empty : "class=\"nocaption\"";

WriteLiteral("\r\n");

DefineSection("DefaultButtons", () => {

WriteLiteral("\r\n    <div");

WriteLiteral(" class=\"text-center clearfix\"");

WriteLiteral(">\r\n");

WriteLiteral("        ");

   Write(BootcssUtil.Button(pageData.SaveButtonCaption, "btn-submit", BootcssButton.Primary, false));

WriteLiteral("\r\n");

WriteLiteral("        ");

   Write(BootcssUtil.Button(pageData.CancelCaption, "m10", BootcssButton.Default, false, retAttr));

WriteLiteral("\r\n    </div>\r\n");

});

  

WriteLiteral("\r\n<form");

WriteAttribute("action", Tuple.Create(" action=\"", 1992), Tuple.Create("\"", 2029)
, Tuple.Create(Tuple.Create("", 2001), Tuple.Create<System.Object, System.Int32>(ViewBag.PageData.FormAction
, 2001), false)
);

WriteLiteral(" method=\"POST\"");

WriteLiteral(" id=\"PostForm\"");

WriteLiteral(" class=\"tk-dataform p5 mb15\"");

WriteLiteral(" role=\"form\"");

WriteLiteral(" data-check=\"true\"");

WriteLiteral(" data-post=\"");

                                                                                                                                        Write(GetJson(table));

WriteLiteral("\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"row tk-datatable table-row\"");

WriteLiteral(" id=\"Info\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"col-sm-4\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"row\"");

WriteLiteral(">\r\n                <label");

WriteLiteral(" class=\"col-sm-4\"");

WriteLiteral(" style=\"height:34px;line-height:34px\"");

WriteLiteral(">编制单位：</label>\r\n                <div");

WriteLiteral(" class=\"col-sm-8 \"");

WriteLiteral(">\r\n                    <input");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" id=\"Company\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(">\r\n                </div>\r\n                <br />\r\n            </div>\r\n        </" +
"div>\r\n        <div");

WriteLiteral(" class=\"col-sm-6\"");

WriteLiteral(">\r\n            <label");

WriteLiteral(" class=\"col-sm-2\"");

WriteLiteral(">日期：</label>\r\n            <span");

WriteLiteral(" class=\"tk-control\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"input-group date\"");

WriteLiteral(" data-control=\"Date\"");

WriteLiteral(" data-date-format=\"yyyy-mm-dd\"");

WriteLiteral(">\r\n                    <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" size=\"10\"");

WriteLiteral(" readonly");

WriteLiteral(" placeholder=\"日期\"");

WriteLiteral(" id=\"InputDate\"");

WriteLiteral(" name=\"InputDate\"");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" data-title=\"日期\"");

WriteLiteral(" value>\r\n                    <span");

WriteLiteral(" class=\"input-group-addon\"");

WriteLiteral("><i");

WriteLiteral(" class=\"glyphicon glyphicon-remove\"");

WriteLiteral("></i></span>\r\n                    <span");

WriteLiteral(" class=\"input-group-addon\"");

WriteLiteral("><i");

WriteLiteral(" class=\"glyphicon glyphicon-calendar\"");

WriteLiteral("></i></span>\r\n                </div>\r\n            </span>\r\n            <br />\r\n  " +
"      </div>\r\n        <div");

WriteLiteral(" class=\"col-sm-2\"");

WriteLiteral(">\r\n            <strong>单位：元</strong>\r\n            <input");

WriteLiteral(" id=\"ReportId\"");

WriteLiteral(" type=\"hidden\"");

WriteAttribute("value", Tuple.Create(" value=\"", 3330), Tuple.Create("\"", 3354)
, Tuple.Create(Tuple.Create("", 3338), Tuple.Create<System.Object, System.Int32>(table.TableName
, 3338), false)
);

WriteLiteral(">\r\n        </div>\r\n    </div>\r\n    <br />\r\n    <div");

WriteAttribute("id", Tuple.Create(" id=\"", 3406), Tuple.Create("\"", 3427)
, Tuple.Create(Tuple.Create("", 3411), Tuple.Create<System.Object, System.Int32>(table.TableName
, 3411), false)
);

WriteAttribute("class", Tuple.Create(" class=\"", 3428), Tuple.Create("\"", 3523)
, Tuple.Create(Tuple.Create("", 3436), Tuple.Create<System.Object, System.Int32>(HtmlUtil.MergeClass("tk-datatable table-row", "column" + table.ColumnCount.ToString())
, 3436), false)
);

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"hide\"");

WriteLiteral(">\r\n            ");

WriteLiteral("\r\n        </div>\r\n        <div");

WriteLiteral(" class=\"row\"");

WriteLiteral(">\r\n");

            
             for (int i = 0; i < columnCount; ++i)
            {
                
                  
                    int start = i * columnFieldCount;
                    int end = start + columnFieldCount;
                    if (end > fieldsCount){
                       end = fieldsCount;
                    }
                
                 

WriteLiteral("                <div");

WriteAttribute("class", Tuple.Create(" class=\"", 4095), Tuple.Create("\"", 4140)
, Tuple.Create(Tuple.Create("", 4103), Tuple.Create<System.Object, System.Int32>("col-sm-" + columnWidth.ToString()
, 4103), false)
);

WriteLiteral(">\r\n                    <table");

WriteLiteral(" class=\"table\"");

WriteLiteral(">\r\n                        <tr>\r\n                            <th>资产</th>\r\n       " +
"                     <th>行次</th>\r\n                            <th>期末数</th>\r\n    " +
"                    </tr>\r\n");

                        
                         for (int j = start; j < end; ++j)
                        {
                            
                              
                            var field = normalFields[j];

                            Tuple<int, byte, FieldStyle> info = field.Tag as Tuple<int, byte, FieldStyle>;
                            string intendClass = info.Item2 == 0 ? string.Empty : "class=\"pdl-" + info.Item2 + "\"";
                            
                             
                            
                             if (info.Item3 == FieldStyle.Title)
                            {

WriteLiteral("                                <tr");

WriteLiteral(" class=\"info\"");

WriteLiteral(">\r\n                                    <td>");

                                   Write(field.DisplayName);

WriteLiteral("</td>\r\n                                    <td></td>\r\n                           " +
"         <td></td>\r\n                                </tr>\r\n");

                            }
                            else
                            {

WriteLiteral("                            <tr>\r\n                                <td ");

                               Write(intendClass);

WriteLiteral(">");

                                            Write(field.DisplayName);

WriteLiteral("</td>\r\n                                <td>");

                               Write(info.Item1);

WriteLiteral("</td>\r\n                                <td>\r\n                                    " +
"<span");

WriteLiteral(" class=\"tk-control\"");

WriteLiteral(">");

                                                        Write(field.Control(dataRow, (DataSet)Model, true));

WriteLiteral("</span>\r\n                                </td>\r\n                            </tr>" +
"\r\n");

                            }
                             
                            
                                        
                        }

WriteLiteral("                    </table>\r\n                </div>\r\n");

            }

WriteLiteral("        </div>\r\n    </div>\r\n</form>\r\n");

Write(RenderSectionOrDefault("ModuleButtons", "DefaultButtons"));

WriteLiteral("\r\n");

        }
    }
}
