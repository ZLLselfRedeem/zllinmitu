//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace YJC.Toolkit.Razor.Dynamic {
    using System;
    using System.Text;
    using System.Collections.Generic;
    using System.Linq;
    using System.IO;
    using YJC.Toolkit.Razor;
    using YJC.Toolkit.Web;
    using System.Data;
    using YJC.Toolkit.Data;
    using YJC.Toolkit.MetaData;
    using YJC.Toolkit.Sys;
    
    
    public class dmituservertestmanagewebxmlrazortemplatebootcsslistlistmaincshtml : YJC.Toolkit.Razor.NormalListTemplate {
        
#line hidden
            
    string OperatorWidth(int width) 
    {
        if (width > 0)
            return "width=\"" + width + "\"";
        return string.Empty;
    }
    
    string CreateColAttrs(IFieldInfoEx field, int index, int sortField)
    {
        Tk5FieldInfoEx tk5Field = field.Convert<Tk5FieldInfoEx>();
        HtmlAttributeBuilder builder = new HtmlAttributeBuilder();
        if (tk5Field.ListDetail != null && tk5Field.ListDetail.ListWidth > 0)
            builder.Add("width", tk5Field.ListDetail.ListWidth);
        if (index == sortField)
            builder.Add((HtmlAttribute)"selected");
        return builder.CreateAttribute();
    }
    
    string CreateHeadAttrs(IFieldInfoEx field, int index, int sortField, DataRow sortRow)
    {
        HtmlAttributeBuilder builder = new HtmlAttributeBuilder();
        Tk5FieldInfoEx tk5Field = field.Convert<Tk5FieldInfoEx>();
        if (tk5Field.DataType == TkDataType.Text || (tk5Field.ListDetail != null && tk5Field.ListDetail.TextHead))
        {
            builder.Add("class", "text-left text-nowrap");
        }
        else
        {
            builder.Add("data-sort", index.ToString());
            string order = sortRow.GetString("Order");
            string sortClass = string.Empty;
            if (index == sortField)
            {
                order = order == "DESC" ? "ASC" : "DESC";
                sortClass = "sort-" + order;
            }
            builder.Add("data-order", order);
            builder.Add("class", HtmlUtil.MergeClass("text-left text-nowrap", sortClass.ToLower()));
        }

        return builder.CreateAttribute();
    }

        
        public dmituservertestmanagewebxmlrazortemplatebootcsslistlistmaincshtml() {
        }
        
        public override void Execute() {
  
    DataSet dataSet = (DataSet)Model;
    DataRow countRow = dataSet.GetRow("Count");
    string tableName = ViewBag.MetaData.Table.TableName;
    DataTable dataTable = dataSet.Tables[tableName];
    string url = dataSet.GetFieldValue<string>("URL", "DSelfURL");
    string condition = dataSet.GetFieldValue<string>("Sort", "SqlCon");
    IEnumerable<IFieldInfoEx> fields = ViewBag.MetaData.Table.TableList;
    NormalListData pageData = (NormalListData)ViewBag.PageData;
    DataRow sortRow = dataSet.GetRow("Sort");
    int sortField = sortRow.GetValue<int>("SortField");

WriteLiteral("\r\n");

DefineSection("DefaultListHeader", () => {

WriteLiteral("\r\n    <tr>\r\n");

        
         if (pageData.OperatorPosition == OperatorPosition.Left)
        {

WriteLiteral("            <th");

WriteLiteral(" class=\"text-center text-nowrap\"");

WriteLiteral(">\r\n                <div>");

                Write(pageData.OperationCaption);

WriteLiteral("</div>\r\n            </th>\r\n");

        }

WriteLiteral("        ");

          
            int index = 0;
        
WriteLiteral("\r\n");

        
         foreach (IFieldInfoEx field in fields)
        {

WriteLiteral("            <th ");

           Write(CreateHeadAttrs(field, index++, sortField, sortRow));

WriteLiteral(">\r\n                <div>");

                Write(field.DisplayName);

WriteLiteral("</div>\r\n            </th>\r\n");

        }

WriteLiteral("        ");

         if (pageData.OperatorPosition == OperatorPosition.Right)
        {

WriteLiteral("            <th");

WriteLiteral(" class=\"text-center text-nowrap\"");

WriteLiteral(">\r\n                <div>");

                Write(pageData.OperationCaption);

WriteLiteral("</div>\r\n            </th>\r\n");

        }

WriteLiteral("    </tr>\r\n");

});

DefineSection("DefaultListWidth", () => {

WriteLiteral("\r\n");

    
     if (pageData.OperatorPosition == OperatorPosition.Left)
    {

WriteLiteral("        <col ");

        Write(OperatorWidth(pageData.OperatorWidth));

WriteLiteral(" />\r\n");

    }

WriteLiteral("    ");

      
        int index = 0;
    
WriteLiteral("\r\n");

    
     foreach (IFieldInfoEx field in fields)
    {

WriteLiteral("        <col ");

        Write(CreateColAttrs(field, index++, sortField));

WriteLiteral(" />\r\n");

    }

WriteLiteral("    ");

     if (pageData.OperatorPosition == OperatorPosition.Right)
    {

WriteLiteral("        <col ");

        Write(OperatorWidth(pageData.OperatorWidth));

WriteLiteral(" />\r\n");

    }

});

DefineSection("DefaultTabSheet", () => {

WriteLiteral("\r\n");

    
     if (BootcssUtil.HasTabSheet(dataSet)) {

WriteLiteral("        <ul");

WriteAttribute("class", Tuple.Create(" class=\"", 3750), Tuple.Create("\"", 3835)
, Tuple.Create(Tuple.Create("", 3758), Tuple.Create<System.Object, System.Int32>(HtmlUtil.MergeClass("nav", BootcssUtil.GetTabClass(pageData.TabDisplayType))
, 3758), false)
);

WriteLiteral(" role=\"tablist\"");

WriteLiteral(">\r\n");

WriteLiteral("            ");

       Write(BootcssUtil.CreateTabSheets(dataSet));

WriteLiteral("\r\n        </ul>\r\n");

    }

});

Write(RenderSectionOrDefault("TabSheet", "DefaultTabSheet"));

WriteLiteral("\r\n<table");

WriteAttribute("class", Tuple.Create(" class=\"", 3992), Tuple.Create("\"", 4078)
, Tuple.Create(Tuple.Create("", 4000), Tuple.Create<System.Object, System.Int32>(HtmlUtil.MergeClass("list-table table", pageData.Display.TableDisplayClass())
, 4000), false)
);

WriteLiteral(">\r\n    <colgroup>\r\n");

WriteLiteral("        ");

   Write(RenderSectionOrDefault("ListWidth", "DefaultListWidth"));

WriteLiteral("\r\n    </colgroup>\r\n");

    
     if (pageData.ShowListHeader)
    {

WriteLiteral("        <thead>\r\n");

WriteLiteral("            ");

       Write(RenderSectionOrDefault("ListHeader", "DefaultListHeader"));

WriteLiteral("\r\n        </thead>\r\n");

    }

WriteLiteral("    <tbody");

WriteLiteral(" id=\"pageList\"");

WriteLiteral(" data-totalcount=\"");

                                     Write(countRow.GetString("TotalCount"));

WriteLiteral("\"");

WriteLiteral(" data-totalpage=\"");

                                                                                        Write(countRow.GetString("TotalPage"));

WriteLiteral("\"");

WriteLiteral(" data-sort=\"");

                                                                                                                                     Write(sortField);

WriteLiteral("\"");

WriteLiteral(" data-order=\"");

                                                                                                                                                             Write(sortRow.GetString("Order"));

WriteLiteral("\"");

WriteLiteral(" data-page=\"");

                                                                                                                                                                                                     Write(countRow.GetString("CurrentPage"));

WriteLiteral("\"");

WriteLiteral(" data-url=\"");

                                                                                                                                                                                                                                                   Write(url);

WriteLiteral("\"");

WriteLiteral(" data-condition=\"");

                                                                                                                                                                                                                                                                         Write(condition);

WriteLiteral("\"");

WriteLiteral(" data-tab=\"");

                                                                                                                                                                                                                                                                                               Write(HtmlUtil.GetSelectedTab(dataSet));

WriteLiteral("\"");

WriteLiteral(" data-source=\"");

                                                                                                                                                                                                                                                                                                                                                Write(dataSet.GetFieldValue<string>("Info", "Source"));

WriteLiteral("\"");

WriteLiteral(">\r\n");

        
         if (dataTable != null)
        {
            
             foreach (DataRow row in dataTable.Rows)
            {
                
                  
                string rowString = @RenderRow(row);
                
                 
                if (rowString != null)
                {
                    
               Write(rowString);

                              
                }
                else
                {

WriteLiteral("                    <tr>\r\n");

                        
                         if (pageData.OperatorPosition == OperatorPosition.Left)
                        {

WriteLiteral("                            <td");

WriteLiteral(" class=\"text-nowrap text-center\"");

WriteLiteral(">");

                                                           Write(BootcssUtil.CreateRowOperators(dataSet, row));

WriteLiteral("</td>\r\n");

                        }
WriteLiteral("\r\n");

                        
                         foreach (IFieldInfoEx field in fields)
                        {
                            
                              
                            Tk5FieldInfoEx fieldInfo = field.Convert<Tk5FieldInfoEx>();
                            string fieldString = @RenderFieldItem(row, fieldInfo);
                            
                             
                            if (fieldString == null)
                            {

WriteLiteral("                                <td>");

                               Write(fieldInfo.DisplayValue(row));

WriteLiteral("</td>\r\n");

                            }
                            else
                            {
                                
                           Write(fieldString);

                                            
                            }
                        }
WriteLiteral("\r\n");

                        
                         if (pageData.OperatorPosition == OperatorPosition.Right)
                        {

WriteLiteral("                            <td");

WriteLiteral(" class=\"text-nowrap text-center\"");

WriteLiteral(">");

                                                           Write(BootcssUtil.CreateRowOperators(dataSet, row));

WriteLiteral("</td>\r\n");

                        }
WriteLiteral("\r\n                    </tr>\r\n");

                }
            }
             
        }

WriteLiteral("    </tbody>\r\n</table>\r\n");

 if (countRow.GetValue<int>("TotalCount") == 0)
{

WriteLiteral("    <div");

WriteLiteral(" class=\"p30\"");

WriteLiteral(">");

                Write(pageData.NoDataCaption);

WriteLiteral("</div>\r\n");

}
else
{
    
     if (@pageData.ShowPage)
    {
        
   Write(RenderLayoutPartial("pagenumber.cshtml", Model));

                                                        
    }
     
}

        }
    }
}
