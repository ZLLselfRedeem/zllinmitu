//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace YJC.Toolkit.Razor.Dynamic {
    using System;
    using System.Text;
    using System.Collections.Generic;
    using System.Linq;
    using System.IO;
    using YJC.Toolkit.Razor;
    using YJC.Toolkit.Web;
    using YJC.Toolkit.Sys;
    using YJC.Toolkit.Data;
    using System.Data;
    
    
    public class drepgitmanagermituworkmituservertestmanagewebxmlrazorusermanagerpartrightcshtml : YJC.Toolkit.Razor.NormalCustomTemplate {
        
#line hidden
            
    string IsChecked(DataRow row, HashSet<int> partSet)
    {
        int id = row["Id"].Value<int>();
        if (partSet.Contains(id))
            return "checked";
        return string.Empty;
    }

        
        public drepgitmanagermituworkmituservertestmanagewebxmlrazorusermanagerpartrightcshtml() {
        }
        
        public override void Execute() {
  
    DataSet dataSet = (DataSet)Model;
    DataTable partTable = dataSet.Tables["PartFunc"];
    HashSet<int> partSet = new HashSet<int>();
    if (partTable != null)
    {
        foreach (DataRow row in partTable.Rows)
            partSet.Add(row["FuncId"].Value<int>());
    }
    DataTable funcTable = dataSet.Tables["Function"];
    IEnumerable<DataRow> rootRows;
    if (funcTable == null)
        rootRows = null;
    else
        rootRows = from item in funcTable.AsEnumerable()
                   where item.Field<int>("ParentId") == -1
                   orderby item.Field<string>("TreeLayer")
                   select item;

WriteLiteral("\r\n");

DefineSection("Main", () => {

WriteLiteral("\r\n");

    
     if (rootRows != null)
    {

WriteLiteral("        <div>\r\n            <input");

WriteLiteral(" type=\"hidden\"");

WriteLiteral(" id=\"PartId\"");

WriteAttribute("value", Tuple.Create(" value=\"", 1201), Tuple.Create("\"", 1252)
, Tuple.Create(Tuple.Create("", 1209), Tuple.Create<System.Object, System.Int32>(dataSet.GetFieldValue("QueryString", "Id")
, 1209), false)
);

WriteLiteral(" />\r\n");

            
             foreach (var rootRow in rootRows)
            {
                
                  
                 int id = rootRow["Id"].Value<int>();
                 IEnumerable<DataRow> rows = from item in funcTable.AsEnumerable()
                                             where item.Field<int>("ParentId") == id
                                             orderby item.Field<string>("TreeLayer")
                                             select item;
                
                 

WriteLiteral("                <div");

WriteLiteral(" class=\"panel panel-default root\"");

WriteLiteral(" data-id=\"");

                                                          Write(id);

WriteLiteral("\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"panel-heading\"");

WriteLiteral(">\r\n                        <div");

WriteLiteral(" class=\"pull-right\"");

WriteLiteral(">\r\n                            <a");

WriteLiteral(" class=\"mr5 checkall\"");

WriteLiteral(" href=\"#\"");

WriteLiteral(">全选</a>\r\n                            <a");

WriteLiteral(" class=\"mr5 anticheck\"");

WriteLiteral(" href=\"#\"");

WriteLiteral(">反选</a>\r\n                            <a");

WriteLiteral(" class=\"mr5 uncheckall\"");

WriteLiteral(" href=\"#\"");

WriteLiteral(">全不选</a>\r\n                        </div>");

                         Write(rootRow.GetString("Name"));

WriteLiteral("\r\n                    </div>\r\n                    <div");

WriteLiteral(" class=\"panel-body\"");

WriteLiteral(">\r\n");

                        
                         foreach (DataRow childRow in rows)
                        {

WriteLiteral("                            <div");

WriteLiteral(" class=\"checkbox\"");

WriteLiteral(">\r\n                                <label>\r\n                                    <" +
"input");

WriteLiteral(" type=\"checkbox\"");

WriteAttribute("value", Tuple.Create(" value=\"", 2481), Tuple.Create("\"", 2514)
, Tuple.Create(Tuple.Create("", 2489), Tuple.Create<System.Object, System.Int32>(childRow.GetString("Id")
, 2489), false)
);

WriteLiteral(" ");

                                                                                        Write(IsChecked(childRow, partSet));

WriteLiteral(">");

                                                                                                                      Write(childRow.GetString("Name"));

WriteLiteral("</label>\r\n                            </div>\r\n");

                        }

WriteLiteral("                    </div>\r\n                </div>\r\n");

            }

WriteLiteral("        </div>\r\n");

    }

WriteLiteral("    <div");

WriteLiteral(" class=\"text-center cl pt10 mb15\"");

WriteLiteral(">\r\n");

        
         if (rootRows != null) 
        {
            
       Write(BootcssUtil.Button("保存", "btn-save mr10", BootcssButton.Primary, false));

                                                                                    
        }

WriteLiteral("        ");

   Write(BootcssUtil.Button("关闭", "", BootcssButton.Default, false, new HtmlAttribute("data-dialog-action", "close")));

WriteLiteral("\r\n    </div>\r\n");

});

        }
    }
}
