//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace YJC.Toolkit.Razor.Dynamic {
    using System;
    using System.Text;
    using System.Collections.Generic;
    using System.Linq;
    using System.IO;
    using YJC.Toolkit.Razor;
    using YJC.Toolkit.Web;
    using System.Data;
    using YJC.Toolkit.Data;
    using YJC.Toolkit.Sys;
    
    
    public class drepgitmanagermituworkmituservertestmanagewebxmlrazortemplatebootcsslistpagenumbercshtml : YJC.Toolkit.Razor.NormalListTemplate {
        
#line hidden
            
    string GetPageTitle(int i)
    {
        return string.Format("查看第{0}页", i);
    }

    string IsActive(int index, int currentPage)
    {
        if (index == currentPage)
            return " class=\"active\"";
        else
            return string.Empty;
    }

        
        public drepgitmanagermituworkmituservertestmanagewebxmlrazortemplatebootcsslistpagenumbercshtml() {
        }
        
        public override void Execute() {
  
    DataSet dataSet = (DataSet)Model;
    DataRow countRow = dataSet.GetRow("Count");
    int currentPage = countRow.GetValue<int>("CurrentPage");
    int totalPage = countRow.GetValue<int>("TotalPage");
    NormalListData pageData = (NormalListData)ViewBag.PageData;

WriteLiteral("\r\n");

 if (totalPage >= 0)
{
    
      
        int pageNumberCount = pageData.PageNumberCount;
        int startPage = currentPage == 0 ? 0 : ((int)Math.Ceiling((currentPage + 1) / (double)pageNumberCount) - 1) * pageNumberCount;
        int endPage = startPage <= (totalPage - pageNumberCount) ? startPage + pageNumberCount : totalPage + 1;
        int firstPage = currentPage < 1 ? 0 : currentPage - 1;
        int lastPage = currentPage + 1 > totalPage ? totalPage : currentPage + 1;
    
     

WriteLiteral("    <ul");

WriteLiteral(" class=\"pagination pull-right\"");

WriteLiteral(">\r\n");

        
         if (totalPage >= pageNumberCount)
        {

WriteLiteral("            <li ");

           Write(IsActive(firstPage, currentPage));

WriteLiteral("><a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" data-page=\"");

                                                                     Write(firstPage + 1);

WriteLiteral("\"");

WriteLiteral(" title=\"上一页\"");

WriteLiteral(">&lt;</a></li>\r\n");

        }

WriteLiteral("        ");

         for (int i = startPage; i < endPage; ++i)
        {

WriteLiteral("            <li ");

           Write(IsActive(i, currentPage));

WriteLiteral("><a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" data-page=\"");

                                                             Write(i + 1);

WriteLiteral("\"");

WriteAttribute("title", Tuple.Create(" title=\"", 1576), Tuple.Create("\"", 1604)
  , Tuple.Create(Tuple.Create("", 1584), Tuple.Create<System.Object, System.Int32>(GetPageTitle(i + 1)
, 1584), false)
);

WriteLiteral(">");

                                                                                                    Write(i + 1);

WriteLiteral("</a></li>\r\n");

        }

WriteLiteral("        ");

         if (totalPage >= pageNumberCount)
        {

WriteLiteral("            <li ");

           Write(IsActive(lastPage, currentPage));

WriteLiteral("><a");

WriteLiteral(" href=\"#\"");

WriteLiteral(" data-page=\"");

                                                                    Write(lastPage + 1);

WriteLiteral("\"");

WriteLiteral(" title=\"下一页\"");

WriteLiteral(">></a></li>\r\n");

        }

WriteLiteral("        <li><span>共<b>");

                  Write(totalPage + 1);

WriteLiteral("</b>页，<b>");

                                          Write(countRow.GetString("TotalCount"));

WriteLiteral("</b>条记录</span></li>\r\n    </ul>\r\n");

}
        }
    }
}
