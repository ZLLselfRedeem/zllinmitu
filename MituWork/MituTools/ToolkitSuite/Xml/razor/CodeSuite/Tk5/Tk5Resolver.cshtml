@using System.Linq;
@using Toolkit.Suite
@using Toolkit.Suite.Utility
@using YJC.Toolkit.Data;
@using YJC.Toolkit.Sys;
@{
    GeneratorItemEventArgs e = @Model as GeneratorItemEventArgs;
    TableInfo table = e.Table;
    string normalName = StringUtil.GetSignName(table.TableName);
}
using System;
using System.Data;
using YJC.Toolkit.Data;
using YJC.Toolkit.Sys;

namespace @e.Setting.Namespace
{
    /// <summary>
    ///  @(table.TableDesc)(@table.TableName)的数据访问层类
    /// </summary>
    [Resolver(Author = "@(e.Setting.Author)", CreateDate = "@DateTime.Today.ToString("yyyy-MM-dd")",
        Description = "@(table.TableDesc)(@table.RegName)的数据访问层类")]
    public class @(normalName)Resolver : Tk5TableResolver
    {
        internal const string DATAXML = "@(e.Setting.ProjectName)/@(normalName).xml";

        /// <summary>
        /// 建构函数，设置附着的Xml文件。
        /// </summary>
        /// <param name="context">数据库连接上下文</param>
        /// <param name="source">附着的数据源</param>
        public @(normalName)Resolver(IDbDataSource source)
            : base(DATAXML, source)
        {
@{
    int keyCount = (from field in table.Fields where field.IsKey select field).Count();
    string key = string.Empty;
    if (keyCount == 1)
    {
            @:AutoUpdateKey = true;
    }
    FieldInfo createIdField = (from field in table.Fields where field.FieldName.EndsWith("CREATE_ID") select field).FirstOrDefault();
    FieldInfo createDateField = (from field in table.Fields where field.FieldName.EndsWith("CREATE_DATE") select field).FirstOrDefault();
    FieldInfo updateIdField = (from field in table.Fields where field.FieldName.EndsWith("UPDATE_ID") select field).FirstOrDefault();
    FieldInfo updateDateField = (from field in table.Fields where field.FieldName.EndsWith("UPDATE_DATE") select field).FirstOrDefault();
    if (createIdField != null && createDateField != null && updateIdField != null && updateDateField != null)
    {
            @:AutoTrackField = true;
    }
}
        }

        /// <summary>
        /// 在表发生新建、修改和删除的时候触动。注意，千万不要删除base.OnUpdatingRow(e);
        /// UpdatingRow事件附着在基类该函数中。
        /// </summary>
        /// <param name="e">事件参数</param>
        protected override void OnUpdatingRow(UpdatingEventArgs e)
        {
            base.OnUpdatingRow(e);

            switch (e.Status)
            {
                case UpdateKind.Insert:
                    break;
                case UpdateKind.Update:
                    break;
                case UpdateKind.Delete:
                    break;
            }
        }
    }
}