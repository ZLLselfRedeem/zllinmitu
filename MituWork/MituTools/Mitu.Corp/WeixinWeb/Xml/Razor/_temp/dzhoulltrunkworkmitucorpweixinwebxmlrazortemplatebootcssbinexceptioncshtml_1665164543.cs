//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace YJC.Toolkit.Razor.Dynamic {
    using System;
    using System.Text;
    using System.Collections.Generic;
    using System.Linq;
    using System.IO;
    using YJC.Toolkit.Razor;
    using YJC.Toolkit.Web;
    using System.Web;
    using YJC.Toolkit.Data;
    using YJC.Toolkit.Sys;
    
    
    public class dzhoulltrunkworkmitucorpweixinwebxmlrazortemplatebootcssbinexceptioncshtml : YJC.Toolkit.Razor.ToolkitTemplate {
        
#line hidden
        
        public dzhoulltrunkworkmitucorpweixinwebxmlrazortemplatebootcssbinexceptioncshtml() {
        }
        
        public override void Execute() {
  
    ErrorInfo info = ((ExceptionData)Model).Error;
    List<ExceptionInfo> errors = ((ExceptionData)Model).Infos;
    errors.Reverse();
    int i = 0;

WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>程序出错了！</title>\r\n    <meta");

WriteLiteral(" http-equiv=\"X-UA-Compatible\"");

WriteLiteral(" content=\"IE=edge\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" http-equiv=\"Content-Type\"");

WriteLiteral(" content=\"text/html; charset=utf-8\"");

WriteLiteral(" />\r\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable" +
"=0;\"");

WriteLiteral(" />\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteAttribute("href", Tuple.Create(" href=\"", 705), Tuple.Create("\"", 778)
, Tuple.Create(Tuple.Create("", 712), Tuple.Create<System.Object, System.Int32>("toolkitjs/v5/bootstrap/css/bootstrap.min.css".AppVirutalPath()
, 712), false)
);

WriteLiteral(" />\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteAttribute("href", Tuple.Create(" href=\"", 826), Tuple.Create("\"", 905)
, Tuple.Create(Tuple.Create("", 833), Tuple.Create<System.Object, System.Int32>("toolkitjs/v5/bootstrap/css/bootstrap-theme.min.css".AppVirutalPath()
, 833), false)
);

WriteLiteral(" />\r\n</head>\r\n<body>\r\n    <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\r\n        <h2");

WriteLiteral(" class=\"text-danger\"");

WriteLiteral(">“");

                            Write(info.Page);

WriteLiteral("”出现错误。 </h2>\r\n        <h2><small>");

              Write(info.Url);

WriteLiteral("</small></h2>\r\n        <div");

WriteLiteral(" class=\"panel-group\"");

WriteLiteral(" id=\"exceptionDetail\"");

WriteLiteral(">\r\n");

            
             foreach (ExceptionInfo error in errors)
            {
                
                  
                     string inClass = string.Empty;
                     if (i == 0)
                     {
                        inClass = "in";
                     }
                     string name = "error" + (++i);
                 
                  

WriteLiteral("                <div");

WriteLiteral(" class=\"panel panel-default\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"panel-heading\"");

WriteLiteral(">\r\n                        <h4");

WriteLiteral(" class=\"panel-title\"");

WriteLiteral(">\r\n                            <a");

WriteLiteral(" data-toggle=\"collapse\"");

WriteLiteral(" data-parent=\"#exceptionDetail\"");

WriteAttribute("href", Tuple.Create(" href=\"", 1685), Tuple.Create("\"", 1705)
            , Tuple.Create(Tuple.Create("", 1692), Tuple.Create<System.Object, System.Int32>("#" + name
, 1692), false)
);

WriteLiteral(">");

                                                                                                     Write(StringUtil.EscapeHtml(error.Message));

WriteLiteral("</a>\r\n                        </h4>\r\n                    </div>\r\n                " +
"    <div");

WriteAttribute("id", Tuple.Create(" id=\"", 1833), Tuple.Create("\"", 1843)
, Tuple.Create(Tuple.Create("", 1838), Tuple.Create<System.Object, System.Int32>(name
, 1838), false)
);

WriteAttribute("class", Tuple.Create(" class=\"", 1844), Tuple.Create("\"", 1908)
, Tuple.Create(Tuple.Create("", 1852), Tuple.Create<System.Object, System.Int32>(HtmlUtil.MergeClass("panel-collapse collapse", inClass)
, 1852), false)
);

WriteLiteral(">\r\n                        <div");

WriteLiteral(" class=\"panel-body\"");

WriteLiteral(">\r\n                            <dl");

WriteLiteral(" class=\"dl-horizontal\"");

WriteLiteral(">\r\n                                <dt>例外类型</dt>\r\n                               " +
" <dd>");

                               Write(error.Type);

WriteLiteral("</dd>\r\n                            </dl>\r\n");

                            
                             if (!string.IsNullOrEmpty(error.TargetSite))
                            {

WriteLiteral("                                <dl");

WriteLiteral(" class=\"dl-horizontal\"");

WriteLiteral(">\r\n                                    <dt>TargetSite</dt>\r\n                     " +
"               <dd>");

                                   Write(StringUtil.EscapeHtml(error.TargetSite));

WriteLiteral("</dd>\r\n                                </dl>\r\n");

                            }

WriteLiteral("                            <dl");

WriteLiteral(" class=\"dl-horizontal\"");

WriteLiteral(">\r\n                                <dt>错误源</dt>\r\n                                " +
"<dd>");

                                Write(error.ErrorSource + ".dll");

WriteLiteral("</dd>\r\n                            </dl>\r\n");

                            
                             if (!string.IsNullOrEmpty(error.ErrorObj))
                            {

WriteLiteral("                                <dl");

WriteLiteral(" class=\"dl-horizontal\"");

WriteLiteral(">\r\n                                    <dt>错误对象</dt>\r\n                           " +
"         <dd>");

                                   Write(StringUtil.EscapeHtml(error.ErrorObj));

WriteLiteral("</dd>\r\n                                </dl>\r\n");

WriteLiteral("                                <dl");

WriteLiteral(" class=\"dl-horizontal\"");

WriteLiteral(">\r\n                                    <dt>错误对象类型</dt>\r\n                         " +
"           <dd>");

                                   Write(StringUtil.EscapeHtml(error.ErrorObjType));

WriteLiteral("</dd>\r\n                                </dl>\r\n");

                            }

WriteLiteral("                            ");

                             if (!string.IsNullOrEmpty(error.Argument))
                            {

WriteLiteral("                                <dl");

WriteLiteral(" class=\"dl-horizontal\"");

WriteLiteral(">\r\n                                    <dt>函数参数</dt>\r\n                           " +
"         <dd>");

                                   Write(StringUtil.EscapeHtml(error.Argument));

WriteLiteral("</dd>\r\n                                </dl>\r\n");

                            }

WriteLiteral("                            ");

                             if (error.OtherInfos.Count > 0) 
                            {
                                
                                 foreach (KeyValuePair<string, string> pair in error.OtherInfos)
                                {

WriteLiteral("                                    <dl");

WriteLiteral(" class=\"dl-horizontal\"");

WriteLiteral(">\r\n                                        <dt>");

                                       Write(pair.Key);

WriteLiteral("</dt>\r\n                                        <dd><pre>");

                                            Write(StringUtil.EscapeHtml(pair.Value));

WriteLiteral("</pre></dd>\r\n                                    </dl>\r\n");

                                }
                                 
                            }

WriteLiteral("                            <pre>");

                            Write(StringUtil.EscapeHtml(error.StackTrace));

WriteLiteral("</pre>\r\n                        </div>\r\n                    </div>\r\n             " +
"   </div>\r\n");

            }

WriteLiteral("        </div>\r\n        <script");

WriteLiteral(" type=\"text/javascript\"");

WriteAttribute("src", Tuple.Create(" src=\"", 4514), Tuple.Create("\"", 4579)
, Tuple.Create(Tuple.Create("", 4520), Tuple.Create<System.Object, System.Int32>("toolkitjs/v5/lib/jquery-1.11.1.min.js".AppVirutalPath()
, 4520), false)
);

WriteLiteral("></script>\r\n        <script");

WriteLiteral(" type=\"text/javascript\"");

WriteAttribute("src", Tuple.Create(" src=\"", 4630), Tuple.Create("\"", 4700)
, Tuple.Create(Tuple.Create("", 4636), Tuple.Create<System.Object, System.Int32>("toolkitjs/v5/bootstrap/js/bootstrap.min.js".AppVirutalPath()
, 4636), false)
);

WriteLiteral("></script>\r\n</body>\r\n</html>\r\n");

        }
    }
}
