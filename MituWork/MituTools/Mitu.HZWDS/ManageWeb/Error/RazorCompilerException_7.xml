<?xml version="1.0" encoding="utf-8"?><tk:Toolkit xmlns:tk="http://www.qdocuments.net"><Error><Source>UserManager/User</Source><Page>YJC.Toolkit.Web.Page.WebListXmlPage</Page><Url>http://localhost:29533/Library/WebListXmlPage.tkx?Source=UserManager/User</Url><DateTime>2015/2/4 12:24:26</DateTime><UserId>1</UserId><OrgId>1</OrgId></Error><Exception><Message>“YJC.Toolkit.Web.BootcssUtil”并不包含“CreateExcelButton”的定义</Message><ErrorSource>YJC.Toolkit.WebApp</ErrorSource><StackTrace>   在 YJC.Toolkit.Web.WebBasePage.LoadPage()
   在 YJC.Toolkit.Web.ToolkitHttpHandler.ProcessRequest(HttpContext context)</StackTrace><Type>YJC.Toolkit.Razor.RazorCompilerException</Type><TargetSite>Void LoadPage()</TargetSite><OtherInfos><SourceCode>@inherits YJC.Toolkit.Razor.NormalListTemplate
@using System.Data;
@using YJC.Toolkit.Web;
@using YJC.Toolkit.Sys;
@using YJC.Toolkit.Razor;
@{
    DataSet dataSet = (DataSet)Model;
    NormalListData pageData = (NormalListData)ViewBag.PageData;
}
@section DefaultHeader {
    @if (pageData.Header != null)
    {
        @RenderRazorOutputData(pageData.Header, Model)
    }
    else
    {
        &lt;h1&gt;@ViewBag.Title&lt;/h1&gt;
    }
}
@section DefaultFooter {
    @RenderRazorOutputData(pageData.Footer, Model)
}
@section DefaultListButton {
    @if (BootcssUtil.HasListButtons(dataSet) || pageData.ShowExportExcel)
    {
        &lt;div class="panel panel-info"&gt;
            &lt;div class="panel-body"&gt;
                @if (BootcssUtil.HasListButtons(dataSet))
                {
                    @BootcssUtil.CreateListButtons(dataSet)
                }
                @if (pageData.ShowExportExcel)
                {
                    @BootcssUtil.CreateExcelButton()
                }
            &lt;/div&gt;
        &lt;/div&gt;
    }
}
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;@ViewBag.Title&lt;/title&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;" /&gt;
    @RenderLayoutPartial("../bin/css.cshtml", null)
    &lt;link rel="stylesheet" type="text/css" href="@("toolkitcss/v5/commonM/datalist.css".AppVirutalPath())" /&gt;
    @ViewBag.Script.CreateUserCss()
&lt;/head&gt;
&lt;body id="@HtmlUtil.GetPageId(Model)" class="tk-dataPage" data-webpath="@HtmlUtil.AppVirtualPath" data-dialog-height="@pageData.DialogHeight"&gt;
    &lt;div class="container-fluid"&gt;
        @if (pageData.ShowTitle)
        {
            @RenderSectionOrDefault("Header", "DefaultHeader")
        }
        @RenderSectionIfDefined("Query", "query.cshtml", Model)
        &lt;div class="tk-datalist"&gt;
            @if (pageData.OperatorPosition != OperatorPosition.None)
            {
                @RenderSectionOrDefault("ListButtons", "DefaultListButton")
            }
            &lt;div id="listData"&gt;
                @RenderSectionIfDefined("Main", "listmain.cshtml", Model)
            &lt;/div&gt;
        &lt;/div&gt;
        @RenderSectionOrDefault("Footer", "DefaultFooter")
    &lt;/div&gt;
    @RenderLayoutPartial("../bin/js.cshtml", null)
    &lt;script type="text/javascript" src="@("toolkitjs/v5/toolkit/coreT/toolkit.normallist.js".AppVirutalPath())"&gt; &lt;/script&gt;
    @ViewBag.Script.CreateUserJavaScript()
&lt;/body&gt;
&lt;/html&gt;
</SourceCode><CompileCode>//------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// &lt;/auto-generated&gt;
//------------------------------------------------------------------------------

namespace YJC.Toolkit.Razor.Dynamic {
    using System;
    using System.Text;
    using System.Collections.Generic;
    using System.Linq;
    using System.IO;
    using YJC.Toolkit.Razor;
    using YJC.Toolkit.Web;
    using System.Data;
    using YJC.Toolkit.Sys;
    
    
    public class dcinternalfilemituhzwdsmanagewebxmlrazortemplatebootcsslisttemplatecshtml : YJC.Toolkit.Razor.NormalListTemplate {
        
#line hidden
        
        public dcinternalfilemituhzwdsmanagewebxmlrazortemplatebootcsslisttemplatecshtml() {
        }
        
        public override void Execute() {
  
    DataSet dataSet = (DataSet)Model;
    NormalListData pageData = (NormalListData)ViewBag.PageData;

WriteLiteral("\r\n");

DefineSection("DefaultHeader", () =&gt; {

WriteLiteral("\r\n");

    
     if (pageData.Header != null)
    {
        
   Write(RenderRazorOutputData(pageData.Header, Model));

                                                      
    }
    else
    {

WriteLiteral("        &lt;h1&gt;");

       Write(ViewBag.Title);

WriteLiteral("&lt;/h1&gt;\r\n");

    }

});

DefineSection("DefaultFooter", () =&gt; {

WriteLiteral("\r\n");

WriteLiteral("    ");

Write(RenderRazorOutputData(pageData.Footer, Model));

WriteLiteral("\r\n");

});

DefineSection("DefaultListButton", () =&gt; {

WriteLiteral("\r\n");

    
     if (BootcssUtil.HasListButtons(dataSet) || pageData.ShowExportExcel)
    {

WriteLiteral("        &lt;div");

WriteLiteral(" class=\"panel panel-info\"");

WriteLiteral("&gt;\r\n            &lt;div");

WriteLiteral(" class=\"panel-body\"");

WriteLiteral("&gt;\r\n");

                
                 if (BootcssUtil.HasListButtons(dataSet))
                {
                    
               Write(BootcssUtil.CreateListButtons(dataSet));

                                                           
                }

WriteLiteral("                ");

                 if (pageData.ShowExportExcel)
                {
                    
               Write(BootcssUtil.CreateExcelButton());

                                                    
                }

WriteLiteral("            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n");

    }

});

WriteLiteral("&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n    &lt;title&gt;");

      Write(ViewBag.Title);

WriteLiteral("&lt;/title&gt;\r\n    &lt;meta");

WriteLiteral(" http-equiv=\"X-UA-Compatible\"");

WriteLiteral(" content=\"IE=edge\"");

WriteLiteral(" /&gt;\r\n    &lt;meta");

WriteLiteral(" http-equiv=\"Content-Type\"");

WriteLiteral(" content=\"text/html; charset=utf-8\"");

WriteLiteral(" /&gt;\r\n    &lt;meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable" +
"=0;\"");

WriteLiteral(" /&gt;\r\n");

WriteLiteral("    ");

Write(RenderLayoutPartial("../bin/css.cshtml", null));

WriteLiteral("\r\n    &lt;link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteAttribute("href", Tuple.Create(" href=\"", 1477), Tuple.Create("\"", 1540)
, Tuple.Create(Tuple.Create("", 1484), Tuple.Create&lt;System.Object, System.Int32&gt;("toolkitcss/v5/commonM/datalist.css".AppVirutalPath()
, 1484), false)
);

WriteLiteral(" /&gt;\r\n");

WriteLiteral("    ");

Write(ViewBag.Script.CreateUserCss());

WriteLiteral("\r\n&lt;/head&gt;\r\n&lt;body");

WriteAttribute("id", Tuple.Create(" id=\"", 1597), Tuple.Create("\"", 1628)
, Tuple.Create(Tuple.Create("", 1602), Tuple.Create&lt;System.Object, System.Int32&gt;(HtmlUtil.GetPageId(Model)
, 1602), false)
);

WriteLiteral(" class=\"tk-dataPage\"");

WriteLiteral(" data-webpath=\"");

                                                                   Write(HtmlUtil.AppVirtualPath);

WriteLiteral("\"");

WriteLiteral(" data-dialog-height=\"");

                                                                                                                 Write(pageData.DialogHeight);

WriteLiteral("\"");

WriteLiteral("&gt;\r\n    &lt;div");

WriteLiteral(" class=\"container-fluid\"");

WriteLiteral("&gt;\r\n");

        
         if (pageData.ShowTitle)
        {
            
       Write(RenderSectionOrDefault("Header", "DefaultHeader"));

                                                              
        }

WriteLiteral("        ");

   Write(RenderSectionIfDefined("Query", "query.cshtml", Model));

WriteLiteral("\r\n        &lt;div");

WriteLiteral(" class=\"tk-datalist\"");

WriteLiteral("&gt;\r\n");

            
             if (pageData.OperatorPosition != OperatorPosition.None)
            {
                
           Write(RenderSectionOrDefault("ListButtons", "DefaultListButton"));

                                                                           
            }

WriteLiteral("            &lt;div");

WriteLiteral(" id=\"listData\"");

WriteLiteral("&gt;\r\n");

WriteLiteral("                ");

           Write(RenderSectionIfDefined("Main", "listmain.cshtml", Model));

WriteLiteral("\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n");

WriteLiteral("        ");

   Write(RenderSectionOrDefault("Footer", "DefaultFooter"));

WriteLiteral("\r\n    &lt;/div&gt;\r\n");

WriteLiteral("    ");

Write(RenderLayoutPartial("../bin/js.cshtml", null));

WriteLiteral("\r\n    &lt;script");

WriteLiteral(" type=\"text/javascript\"");

WriteAttribute("src", Tuple.Create(" src=\"", 2470), Tuple.Create("\"", 2546)
, Tuple.Create(Tuple.Create("", 2476), Tuple.Create&lt;System.Object, System.Int32&gt;("toolkitjs/v5/toolkit/coreT/toolkit.normallist.js".AppVirutalPath()
, 2476), false)
);

WriteLiteral("&gt; &lt;/script&gt;\r\n");

WriteLiteral("    ");

Write(ViewBag.Script.CreateUserJavaScript());

WriteLiteral("\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n");

        }
    }
}
</CompileCode><Error1>行:106,列:34,错误:“YJC.Toolkit.Web.BootcssUtil”并不包含“CreateExcelButton”的定义</Error1></OtherInfos></Exception></tk:Toolkit>